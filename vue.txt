
一.vue双向数据绑定的原理

	vue双向数据绑定指的是当model变化时，视图view随着更新，当视图view改变时，相应的model随着更新。vue实现数据双向绑定是采用数据劫持结合发布者-订阅者模式的方式。实现双向绑定需要完成三步，第一：实现一个发布者 第二：实现一个订阅者 第三：实现一个模版解释器。发布者的实现是利用数据劫持Object.defineProperty()方法，对data中对每个属性及其子属性设定一对getter和setter方法，设定getter和setter方法后，每当获取data中的某个数据时，就会触发相应的getter函数，当给data中某个数据赋值时，就会触发相应的setter方法。此时已经达到了监听data中数据的效果，监听到变化之后需要通知订阅者（也就是通知修改view），此时可以设置一个订阅器，搜集所有的订阅者（也就是搜集页面中所有绑定了数据的节点）。订阅器就是创建一个构造函数，第一可以存储订阅者，第二可以通知订阅者。在循环data中属性时实例话订阅器，并在getter方法中添加订阅者，在setter方法中通知订阅者。订阅者就算实现了。
	实现订阅者就是创建一个构造函数，传入vue的实例对象，data中的属性和当前节点。订阅者是在模版解释器中实例化的，模版解释器就是解析当前页面，在虚拟dom中将当前页面绑定有{{}}和v-model，v-show等节点找到，循环找到的当前节点，此时实例化订阅者的构造函数，往构造函数中传入this，当前节点绑定的data中的属性，当前节点。在订阅者的构造函数中调用了自身的get()方法，该方法返回初始化的值，并且在get()方法中获取了data中当前属性的值，也就是触发了data属性的getter()函数，此时往订阅器中增加了订阅者。此时设计已经完成，当data中属性值发生变化时，触发setter()函数，setter函数中执行了订阅器中一个方法来循环订阅者，如果新得到的数据和老数据发生变化，就会触发函数来更新视图。

二.什么是虚拟DOM?
	虚拟dom就是在内存中生成了一个js对象，这个对象保存了dom所有的节点、属性以及结构。原生js和jquery每次操作dom，都会经历dom数创建，创建Render树，绘制Painting等步骤。假如我一个方法里面更新了5个dom节点，原生js操作或者jquery操作会执行5遍dom操作(没次操作包括创建DOM树——创建StyleRules——创建Render树——布局Layout——绘制Painting)，而虚拟dom中就不一样了，当dom节点更新时，会操作一个js对象，将更新反应到对象中，然后对比找出不同之处一次映射到真实dom中。
	
三. Vue脚手架常用的npm命令有哪些？
	先下载安装node，安装node后就可以执行npm命令了。
	$ npm install -g vue-cli				//1
	$ vue init webpack vue-project		                //2
	$ cd vue-project					//3
	$ npm install						//4
	$ npm run dev	
--------------------- 
	1、本文使用vue-cli是通过npm来下载的，所以首先要有一个node的环境，在安装完node之后，npm就会自动安装在你的电脑中了，然后打开控制台，输入npm install -g vue-cli 全局安装vue-cli。
	2、在安装完vue-cli之后，你就能够在控制台使用vue命令了，进入到想创建工程的文件夹中，输入vue init webpack-simple vue-project，会让你工程名称，描述，作者等信息，然后就会创建一个叫做vue-project的工程。
此时你会得到一个如下的目录结构。


	4、Package.json中有该工程所依赖的各种包，运行npm install，会自动安装这些包。
	5、最后运行npm run dev，会在你本地localhost:8080启动一个服务，你能打开浏览器访问它。

四、请说出vue-cli工程中每个文件夹和文件的用处
五、config文件夹 下 index.js 的对于工程 开发环境 和 生产环境 的配置
六、请你详细介绍一些 package.json 里面的配置
七、对于vue渐进式的理解。

	例如一个大型项目，已经完成得差不多了，但是某个模块你一个小功能，你可以用vue去完成，就像引入jquery一样。vue在此处只完成了相应模块的功能，不会影响到其它地方。整改一个大型项目，你可以一个一个模块的修改，不会影响到整个项目的运行。

八、v-if和v-show的区别，分别在什么时候使用。

	v-if是动态的向dom树内添加或者删除元素，而v-show只是将元素的样式display设置成显示或者隐藏。v-if的切换会改变dom树的结构，v-show不会。当需要频繁切换状态时用v-show，当只是在页面初次渲染，条件几乎不会变化时可使用v-if。

九、vue常用的修饰符。

	常用的有事件修饰符如：.stop(阻止事件冒泡) .prevent(取消默认行为)  .self(只有触发自身的事件才会触发,操作子元素不会触发自身事件) .once(事件只执行一次)
	用法如：<button @click.stop="inner">点击我</button> 
	常用的键盘修饰符如：.enter .up .left
	用法如：<input @keyup.enter=“submit”>(当键盘按键在enter处起来时触发submit函数	)
	常用修饰符如： .trim(去掉首位的空格)
	<input v-model.trim=“msg”>

十、v-on可以绑定多个函数吗？

	v-on中可以绑定多个函数，绑定之后会按照绑定的顺序执行，但是需要注意的是，绑定之后必须加括号。如下：<div class="middle" @click="middle(),top()" style="width: 300px; height: 300px;background: pink;">
不加括号无法运行。

十一、v-for中key值的作用。

	key值可以为循环项添加标记，以提高渲染效率。这里涉及到vue中的虚拟dom，v-for循环有一个“就地复用”策略。（当循环项的数据中有删除或者增加时，vue中采用了高效的Diff算法，如果节点相同，则会重新设置节点属性，实现更新。）假如循环项这个数组长度为十，要在第三和第四项之间插入一个值，使数组长度变成十一，也就是渲染出十一条数据，如果不加key值的话，当渲染到第四项时，会把新数据更新到原来的第四项的列表上，后面所有的列表相当于都会更新，而添加key值后，会在第三和第四之间渲染新数据，后面的复用，提高渲染速率。

十二、$nextTick的使用

	vue中如果从后台获取数据，赋值给一个变量，然后循环这个变量来渲染列表，假如此时你想操作dom，是获取不到dom的，因为vue中是异步执行dom更新的，当数据变化时，会开启一个列队，缓冲在同一事件中发生的所有数据改变，然后循环执行更新dom。

十三、Vue 组件中 data 为什么必须是函数

	当我们使用组件时，就是实例化了这个组件对象，如果组件中的data直接用对象，那么实例化组件后data将会指向内存中同一个地址。假如在同一个页面中有两个地方引用这个组件，那么改变一个组件内的data数据将会影响到另一个组件数据发生改变。如果data是一个函数返回一个对象，那每次使用组件时，运行data函数就会从新产生一个保存数据的对象。

十四、v-for和v-if优先级，怎么使用。

	v-for的优先级高于v-if,当在同一个标签上绑定v-for和v-if时，会先循环数组对象，然后判断v-if中的数据是否为true看是否显示该视图。这样会降低渲染效率，因为不管v-if中的值为true或false，都会进行一次循环。改进的方法是用计算属性来遍历需要循环的数组，当状态值为true时返回需要渲染的值。

十五、vue生命周期有哪些钩子函数，分别有什么用？

	vue生命周期指的是vue实例从创建到销毁的过程。在这个过程中要经历八个钩子函数，分别为，beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroy。
	
	beforeCreate在组件实例刚被创建时执行，此时组件的属性data还没有生成。
	created在组件实例创建完成后运行，此时data属性已经绑定，但是dom还没有生成，此时取不到dom元素。这个钩子函数用得比较多，当需要从后端请求数据，渲染到页面上时可以在这个钩子函数中运行，因为此时data属性已经生成，可以将请求到的数据保存到data中。
	beforeMount是模版编译/挂载前.在vue的脚手架中，此时el没有生成，但是虚拟dom已经创建。
	mounted是模版编译/挂载后。此时将虚拟dom替换成真实dom，el已经生成。但是页面还没有渲染

十六、vue路由原理。
	
    Vue默认使用的路由机制是HTML5 History，HTML5 History中新增了pushState和replaceState方法，pushState方法可以向浏览器历史纪录栈顶增加一项历史纪录，这个方法可以改变url但不会发送url请求页面，（非单页面应用在url改变时会向服务端发送请求来加载当前页面）通过popstate监听浏览器URl的变化来更新视图。还有一种模式是hash模式，window.location中有一个hash属性，该属性的值是#本身以及它后面的字符，hash的改变也会在浏览器访问历史中增加记录，但hash的改变也不会向服务端发送请求，所以可以使用hashchange来监听hash的改变更新视图。我上个angular项目就是使用hash模式实现单页面应用的，angular8默认使用HTML5 History模式，但是当你进入到detail页面时，点击浏览器上的刷新按钮，就会向服务端发送请求，由于后端没有配置detail路由处理，就会报错404找不到当前资源。处理这个问题要么就是后端匹配不到就加载index.html，要么就是前端使用hash配置，当时解决这个问题就是我在app.module；里面配置了使用hash模式。
	