一. 在div中，两个行内元素设置宽度为百分之五十时，会被挤到下一行。原因和解决方案。

	被挤下去是因为行内元素间存在一个空格。解决的方法有很多种。
	第一：可以让标签一行排列，中间不留间隙。 如：<img src="" alt=""><img src="" alt="">
	
	第二：可以给父元素设置一个font-size为0，中间的空白就没了。
	
二、媒体查询。

	媒体查询是根据媒体设备的不同显示不同的样式。
	如
	@media screen and (max-width: 1080px) and (min-width: 480px){
		.ads{
			display: none;
		}
	}
	指设备为屏幕，且屏幕宽度大于或者等于480px，小于或者等于1080px时，样式生效。

三、怎么解决垂直居中问题。

	1、当行内元素需要居中时，可以给父元素设置一个line-height。
	<div style="width: 600px; height: 600px; line-height: 600px;">
    		<span>fdsdfdsa</span>
  	</div>
	2、当父容器里面的子容器需要垂直方向居中时，可以给父容器设置成弹性布局。
	<div style="width: 600px; height: 600px;display: flex;justify-content: space-between;align-items: center">
    		<div>11</div>
    		<div>22</div>
  	</div>
	(注意:此处使用弹性布局，align-items是使元素垂直方向居中，justify-content是设置水平方向的，值为space-around表示水平方向上均匀分布，且容器最左边和最右边的间距为元素间间距的一半，值为space-between表示水平方向均匀分布，最左边元素和最右边元素靠着容器边。)
	3、当子元素为块级元素时，给父元素设置相对定位，子元素设置决定定位。如下
	<div style="width: 600px; height: 600px;position: relative;">
    		<div style="position:absolute;top:50%;transform: translateY(-50%);">11</div>
  	</div>

四、定位的四种用法。(注意；当父元素里面的子元素脱离文档流时，父元素的高度不会被子元素撑开。)

	position可取四个值。static（静态定位）、relative、absolute、fixed
	static：position的默认值就是static，不脱离文档流,无法使用top、bottom、left等。(不可使用z-index)
	relative：相对定位是相对于自身定位，不脱离文档流，而且占据的文档空间不会随着top、left等属性偏移而发生变动。(可使用z-index)
	absolute：绝对定位脱离文档流，是相对于自己最近的祖先非static定位元素来定位。如果父元素都没有定位，则会相对于<html>来定位。
	fixed：固定定位，相对于浏览器视口定位。
	
五、清除浮动的方法。（为什么需要清除浮动，当父元素里面的子元素浮动时，如果父元素的高度和宽度没有设置，由子元素撑开，那么父元素高度将为0，因为浮动的元素会脱离文档流，不会撑开父元素，因此不清除浮动将会影响页面的布局。清除的方法是在父元素的最后面添加一个子元素，给子元素设置属性，clear:both）

	 <div class="parent">
      		<div class="first" style='float: left'>第一个元素</div>
     		<div class="second">第二个元素</div>
      		<div class="three"></div>
    	 </div>
	在最后一个元素上设置属性 ： clear : both;

六、如何保持浮层水平垂直居中。（使用弹性布局和定位的优缺点：弹性布局的优点：简单易懂，缺点：浏览器兼容性差。定位布局的优点：兼容性强，适用性强，缺点：理解性难。）

	<div class="parent">
    		<div class="children">

    		</div>
	</div>
	a.父元素设置弹性布局。(弹性布局中，属性flex-flow是flex-direction和flex-wrap的缩写。flex-flow:row wrap;表示弹性布局按照行排列，且自动换行)
		justify-content:space-around;(space-around是均匀铺开但是最边上的两个元素距离只有一半，sapce-between左右两边的元素贴着父元素，其余元素均匀铺开)
　		align-items:center;
　		display: flex;
	b.父元素相对定位，子元素绝对定位。（子元素属性如下）
		position: absolute;
		left: 50%;
		top: 50%;
		transform: translate(-50%,-50%);

七、em、rem适配。

	这两个单位都是自适配单位。rem的用法，是根据跟元素html字体大小来适配的，当给跟元素html设置字体大小为16px时，1rem就等于16px(注意：当html没有设置字体大小时，默认为16px)。em的用法，em是相对于父元素字体大小来适配的，父元素字体大小为20px，则1em就等于20px，由于页面元素属性有继承效果，如果父元素字体大小没有设置，那当前元素字体大小会继承自父元素（假如父元素字体大小为30px），则1em等于30px；
	
八、css盒子模型。(css3指定的盒子模型width指内容区域的宽度，但是IE浏览器有兼容问题，低版本IE中width指的是border+padding+content，相当于给元素设置box-sizing: border-box)

	在浏览器中，元素可以看做是一个盒子，但是当你给元素设置width和height时，并不是当前元素所占用的位置和设置的宽高一样大，而是当前元素的内容区所占用的区域大小，当前元素所占据的位置 = width + padding + border + margin。当把元素设置box-sizing: border-box时，给元素设置width和height时，是包括边框在内的面积，只不包括margin。（注意：当给元素设置背景颜色时，padding也会变色，边框不会变，margin不会变）

九、什么是伪类、伪元素。（https://www.jianshu.com/p/996d021bced3）

	伪类指的不存在的类，伪类主要作用可以用来选择元素和提供一些状态属性，伪类用:单冒号表示。
	p:first-child	(选择子元素中第一个元素)
	p:first-of-type	(选择子元素中，所有p元素的第一个p元素)
	p:nth-child(n)	(选择子元素中第n个p元素,特别注意不是第n+1个元素)
	p:nth-of-type(n)   (选择子元素中，所有p元素的第n个p元素)
	input:checked  (选择单选框或者复选框被选中的元素)
	p:hover	 （当鼠标悬停在当前元素上时添加样式）


	伪元素指实际文档中没有的元素，伪元素用::双冒号表示，
	比较常用的有::before    ::after
	<p class="element">伪类学习</p>
	.element::before{
		content:" ";
	}	
	content为必须属性，注意当content内容为html代码时，会直接显示带标签的文字	


十、CSS3的新特性

1、边框
border-radius:50%;
box-shadow:10px 10px 5px red; // 四个值分别表示的意思：x抽的偏移、y轴的偏移、模糊阴影的半径、阴影的颜色。
border-image:url(jietu.png) 70 repeat; //此属性是将图片作为标签的边框，注意：标签必须设置border，要不然没有效果

2、背景
设置背景的css属性有：
background-color:背景颜色
background-image:背景图片
background-position:指定背景图片的位置
background-size:指定背景图片的大小
background-repeat：指定如何重复背景图像
background-origin：指定背景图像的定位区域
background-clip：指定背景图像的绘画区域
background-attachment：设置背景图像是否固定或者随着页面的其余部分滚动。
这些属性可以使用缩写方式，顺序没有要求。但是当position和size同时使用时，用/分开。
background: url("duixiang.png") no-repeat center/800px 600px,url("jietu.png") no-repeat center/1000px 800px;（此处设置两张图片为背景图片position为center。）

3、渐变（此处linear-gradient相当于一个函数，给函数传参）
属性为background-image。
例子：background-image: linear-gradient(to right, red , yellow， blue); //从左到右依次变色。
background-image: linear-gradient(0deg, red , yellow， blue)  //从下到上依次变色

4、文本效果
text-shadow: 5px 5px 5px #FF0000; (类似于box-shadow，取值跟box-shadow一样)
text-overflow: ellipsis; (当文本超出显示范围时，显示...)。
word-wrap:break-word; （自动换行属性允许您强制文本换行）

5、2D转换
属性为transform
例子：transform: translate(50px,100px); 根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。
transform: rotate(30deg); 在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。（此角度为旋转的角度,旋转的参考点默认为元素的中心，可以使用transform-origin设置变换原点）
transform:scale(2,3);该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数：
skew()

6、过渡
属性为transition
例子：
div
{
width:100px;
height:100px;
background:blue;
transition:width 2s;
}

div:hover
{
width:300px;
}

transition有四个取值分别为：过渡效果的css属性名称(all)、过渡效果需要多久时间(2s)、过渡效果的速度曲线(linear)、过渡延时多久(2s)
如：transition: all 2s linear ;

7、动画
属性为animation
使用动画需要先定义一个动画帧。
@keyframes myfirst
{
	0%   {background:red; left:0px; top:0px;}
	25%  {background:yellow; left:200px; top:0px;}
	50%  {background:blue; left:200px; top:200px;}
	75%  {background:green; left:0px; top:200px;}
	100% {background:red; left:0px; top:0px;}
}
在指定的元素上使用此动画。
div{
animation: myfirst 5s linear 1s infinite  // 5个值分别为：动画的名称、动画执行的时间、动画执行的速度函数、动画延时多久播放、动画重复的次数。
}

8、盒子模型

9、弹性布局

10、媒体查询
