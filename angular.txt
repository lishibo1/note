重点：angular中的常用语法
{
	所有click方法：(click)="function()"记得要加括号
	所有动态绑定的属性值：[name] = "data.name"
	ngClass的用法： [ngClass] = "{'addColor':data.color,'addSize':data.size}"表示是否渲染addColor和addSize两个类，如果其值为true则渲染。
	ngStyle的用法:  [ngStyle] = "{'background-color': data.color ? 'red' : 'yellow'}"还可以使用函数判断：[ngStyle] = "{'display': getDisplay()}"
	ngIf的用法：*ngIf="isTrue" 为true则渲染该元素
	ngFor的用法：*ngFor="let item of items"
	ngShow: angular2之后ngShow就没了，改成了hidden，表示是否隐藏，值为true时隐藏，值为false时显示。 [hidden] = "isTrue"
	
}


1.MVVM和MVC的区别

      （MVVM是一种开发模式）
	MVVM中的M指model模型，V指视图，VM指视图模型，VM是MVVM模式的核心，是链接view和model的桥梁。它有两个方向：一是将模型（Model）转化成视图(View)，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将视图(View)转化成模型(Model)，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个方向都实现的，我们称之为数据的双向绑定。总结：在MVVM的框架下视图和模型是不能直接通信的。它们通过ViewModel来通信，ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的双向绑定。并且MVVM中的View 和 ViewModel可以互相通信。MVVM流程图如下：

2.angular中生命周期钩子函数。（重点：ngDoCheck、ngAfterContentChecked、ngAfterViewChecked这三个钩子函数在异步完成之后会被调用，而且奇怪的是有时候鼠标移动也会触发这些钩子函数）

	angular生命周期钩子函数有八个，constructor是构造函数，不属于钩子函数，它在所有钩子函数之前运行，constructor构造函数的作用主要是依赖注入，也可以用来执行简单的数据初始化。

	八个钩子函数分别为：ngOnChanges , ngOnInit , ngDoCheck , ngAfterContentInit , ngAfterContentChecked , ngAfterViewInit , ngAfterViewChecked , ngOnDestory。

	ngOnChanges在数据绑定输入属性值发生变化时调用，比较常用在父组件给子组件传值发生改变时会调用。它的调用在ngOnInit之前。
	ngOnInit只会调用一次，在组件初始化时调用，在constructor中只执行简单的数据初始化，而复杂的数据初始化一般可以在这里执行。
	ngDoCheck在第一次进入页面时会调用一次，后续浏览器中发生的任何异步事件都会触发变更检测机制（点击按钮，输入数据，数据从服务器返回）,另外外部插件的引入可能导致鼠标在页面上移动时也会触发，所以这个方法调用时要尽量保证代码效率高，要不然会影响性能。
	ngAfterContentInit只调用一次，当把内容投影进组件之后调用。
	ngAfterContentChecked在第一次进入页面时会调用，后续每次输入属性发生变化时也会被调用。
	ngAfterViewInit只调用一次，初始化完组件视图及其子视图之后调用。
	ngAfterViewChecked在第一次进入页面时会调用，后续每次输入属性发生变化时也会被调用。
	ngOnDestory组件销毁前调用，主要作用是在组件销毁之前，执行一些清理操作，如：移除事件监听、清理定时器等。注销全局服务中的函数，避免内存泄漏。
	（http请求可以放在ngOnInit中)

3.双向数据绑定的原理。

	Angular 采用的是“脏值检测”的方式。angular中设置了一个监听列队，用来监听数据变化时更新view，每当你给view视图上绑定东西时，如{{}}、ngModule、ngClass等操作时，就会把当前绑定的数据加入监听列队中，当浏览器接受到可以被angular context处理的事件时（如click等事件），就会触发这个循环列队，检查所有的数据是否有改变，如果检测到有数据变化，就会再次触发这个循环列队，再次触发这个循环是确保一个数据变化引起循环列队中其它的model变化而没被检测到，直到没有数据变化后，就不在触发循环列队，检测完成之后就会更新相应部分的view视图。


4.angular中引用插件的方法。
	
	第一步：使用npm下载依赖包，此时会自动在package.json中配置下载的版本，且还需下载对应的ts包。
	第二步：在angular.json中配置对应的css和js。
	第三步：在需要使用插件的页面declare插件，就可以使用了。

5.angular中解决跨域常用的方法（angular6以上的版本）。
	
	a.使用jsonp解决跨域问题。
		在appModule里面引入jsonp的模块，然后创建一个服务，在服务中写一个公共方法，this.http.jsonp(url,"callback").subscribe((data)=>{})就可以拿到数据。（缺点：只能支持get请求）

	b.设置跨域头解决跨域问题。
		在nodejs中配置跨域头，假如前端请求页面端口是4200，就配置允许4200端口发送的请求。

	c.请求代理解决跨域问题。
		在根目录下创建一个json文件，配置请求的域名，然后在angular.json文件中的serve处配置刚建的json文件。创建公共服务后就可以使用。

6、angular中常见的命令

	a、创建一个组件: ng g component home(如果要在某个目录下创建组件，则需要cd到当前目录)

7、angular实现路由的原理。
		
	angular默认使用的路由机制是HTML5 History，HTML5 History中新增了pushState和replaceState方法，pushState方法可以向浏览器历史纪录栈顶增加一项历史纪录，这个方法可以改变url但不会发送url请求页面，（非单页面应用在url改变时会向服务端发送请求来加载当前页面）通过popstate监听浏览器URl的变化来更新视图。还有一种模式是hash模式，window.location中有一个hash属性，该属性的值是#本身以及它后面的字符，hash的改变也会在浏览器访问历史中增加记录，但hash的改变也不会向服务端发送请求，所以可以使用hashchange来监听hash的改变更新视图。我上个项目就是使用hash模式实现单页面应用的，angular8默认使用HTML5 History模式，但是当你进入到detail页面时，点击浏览器上的刷新按钮，就会向服务端发送请求，由于后端没有配置detail路由处理，就会报错404找不到当前资源。处理这个问题要么就是后端匹配不到就加载index.html，要么就是前端使用hash配置，当时解决这个问题就是我在app.module；里面匹配了使用hash模式。